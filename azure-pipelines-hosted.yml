# Azure DevOps Pipeline for Playwright Tests with Allure Reports
# PARA USAR CUANDO TENGAS PARALLELISM GRANT
trigger:
- main
- feature/*

pool:
  vmImage: 'ubuntu-latest'  # Requiere parallelism grant

variables:
  - name: PLAYWRIGHT_SERVICE_URL
    value: 'wss://westeurope.api.playwright.microsoft.com/accounts/westeurope_1f9793c4-7905-4e6a-b9aa-b9d47e97333c'

stages:
- stage: Test
  displayName: 'Run Playwright Tests'
  jobs:
  - job: PlaywrightTests
    displayName: 'Execute Tests'
    steps:
    
    # Install Node.js
    - task: NodeTool@0
      inputs:
        versionSpec: '18.x'
      displayName: 'Install Node.js'
    
    # Debug: Show workspace content
    - script: |
        echo "Current directory:"
        pwd
        echo "Directory contents:"
        ls -la
        echo "package.json exists:"
        test -f package.json && echo "YES" || echo "NO"
        echo "Node.js version:"
        node --version
        echo "NPM version:"
        npm --version
      displayName: 'Debug: Workspace Info'
    
    # Install dependencies
    - script: |
        npm ci
      displayName: 'Install npm dependencies'
    
    # Install Playwright browsers
    - script: |
        npx playwright install --with-deps
      displayName: 'Install Playwright browsers'
    
    # Run tests with LOCAL configuration first (to test basic setup)
    - script: |
        npm run test:navbar
      displayName: 'Run Navbar Tests (Local)'
      continueOnError: true
    
    # Publish Allure Report - Using basic file publish first
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Allure Results as Artifact'
      inputs:
        pathToPublish: 'allure-results'
        artifactName: 'allure-results'
      condition: always()
    
    # Optional: Try to install and use Allure CLI to generate HTML report
    - script: |
        echo "Installing Allure CLI..."
        npm install -g allure-commandline
        echo "Generating Allure HTML report..."
        allure generate allure-results --clean -o allure-report
        echo "List generated files:"
        ls -la allure-report/
      displayName: 'Generate Allure HTML Report'
      condition: always()
      continueOnError: true
    
    # Publish the HTML report as artifact too
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Allure HTML Report'
      inputs:
        pathToPublish: 'allure-report'
        artifactName: 'allure-html-report'
      condition: always()
      continueOnError: true
